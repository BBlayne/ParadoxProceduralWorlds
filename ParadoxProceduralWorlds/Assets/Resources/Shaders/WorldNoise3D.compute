#pragma kernel ComputeNoise

// booleans
uniform int normalize;
uniform int showFalloff;

uniform int octaves;
uniform float persistence;
uniform float lacunarity;
uniform float noiseScale;
uniform float waterLevel;
uniform float aFalloffFactor;
uniform float bFalloffFactor;
uniform float2 offset;

uniform uint2 reses;

uniform StructuredBuffer<int> perm;

RWTexture2D<float4> Result;

//
// STATIC CODES
//

//int grad3[3][3] = {{ 3, 3, 3 }, { 3, 3, 3 }, { 3, 3, 3 }};

static int grad3[12][3] = {{1,1,0}, {-1,1,0}, {1,-1,0}, {-1,-1,0}, {1,0,1}, {-1,0,1}, {1,0,-1}, {-1,0,-1}, {0,1,1}, {0,-1,1}, {0,1,-1}, {0,-1,-1}};

static int grad4[32][4] = { {0, 1, 1, 1 }, {0,1,1,-1},  {0,1,-1,1},  {0,1,-1,-1},
                                    {0,-1,1,1}, {0,-1,1,-1}, {0,-1,-1,1}, {0,-1,-1,-1},
                                    {1,0,1,1}, {1,0,1,-1},  {1,0,-1,1},  {1,0,-1,-1},
                                    {-1,0,1,1}, {-1,0,1,-1}, {-1,0,-1,1}, {-1,0,-1,-1},
                                    {1,1,0,1}, {1,1,0,-1},  {1,-1,0,1},  {1,-1,0,-1},
                                    {-1,1,0,1}, {-1,1,0,-1}, {-1,-1,0,1}, {-1,-1,0,-1},
                                    {1,1,1,0}, {1,1,-1,0},  {1,-1,1,0},  {1,-1,-1,0},
                                    {-1,1,1,0}, {-1,1,-1,0}, {-1,-1,1,0}, {-1,-1,-1,0}};

static int simplex[64][4] = {
 {0,1,2,3}, {0,1,3,2}, {0,0,0,0}, {0,2,3,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {1,2,3,0},
 {0,2,1,3}, {0,0,0,0}, {0,3,1,2}, {0,3,2,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {1,3,2,0},
 {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0},
 {1,2,0,3}, {0,0,0,0}, {1,3,0,2}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {2,3,0,1}, {2,3,1,0},
 {1,0,2,3}, {1,0,3,2}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {2,0,3,1}, {0,0,0,0}, {2,1,3,0},
 {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0},
 {2,0,1,3}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {3,0,1,2}, {3,0,2,1}, {0,0,0,0}, {3,1,2,0},
 {2,1,0,3}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {3,1,0,2}, {0,0,0,0}, {3,2,0,1}, {3,2,1,0}};

// Utility functions
int fastfloor(float x) {
    return x > 0 ? int(x) : int(x) - 1;
}
float dotF(int g[3], float x, float y) {
    return g[0] * x + g[1] * y;
}
float dotF(int g[3], float x, float y, float z) {
    return g[0] * x + g[1] * y + g[2] * z;
}
float dotF(int g[4], float x, float y, float z, float w) {
    return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
}
float clamp01(float value)
{
    return clamp(value, 0, 1);
}

// fall off
float eval(float z, float a, float b)
{
    return pow(z, a) / (pow(z, a) + pow(abs(b - b * z), a));
}
float sqrFallOff(int width, int height, int x, int y)
{
    float i = x / (float)width * 2 - 1;
    float j = y / (float)height * 2 - 1;

    // defaults, a : 3, b : 2.2
    return eval(max(abs(i), abs(j)), aFalloffFactor, bFalloffFactor);
}


//
// NOISE GENERATION CODE
//


//3D
float Noise3D(float x, float y, float z) {
    float n0, n1, n2, n3;

    float F3 = 1.0 / 3.0;
    float s = (x + y + z) * F3;
    int i = fastfloor(x + s);
    int j = fastfloor(y + s);
    int k = fastfloor(z + s);
    float G3 = 1.0 / 6.0;
    float t = (i + j + k) * G3;
    float X0 = i - t;
    float Y0 = j - t;
    float Z0 = k - t;
    float x0 = x - X0;
    float y0 = y - Y0;
    float z0 = z - Z0;

    int i1, j1, k1;
    int i2, j2, k2;
    if (x0 >= y0) {
        if (y0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        } else if (x0 >= z0) {
            i1 = 1;
            j1 = 0;
            k1 = 0;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 1;
            j2 = 0;
            k2 = 1;
        }
    } else {
        if (y0 < z0) {
            i1 = 0;
            j1 = 0;
            k1 = 1;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else if (x0 < z0) {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 0;
            j2 = 1;
            k2 = 1;
        } else {
            i1 = 0;
            j1 = 1;
            k1 = 0;
            i2 = 1;
            j2 = 1;
            k2 = 0;
        }
    }

    float x1 = x0 - i1 + G3;
    float y1 = y0 - j1 + G3;
    float z1 = z0 - k1 + G3;
    float x2 = x0 - i2 + 2.0 * G3;
    float y2 = y0 - j2 + 2.0 * G3;
    float z2 = z0 - k2 + 2.0 * G3;
    float x3 = x0 - 1.0 + 3.0 * G3;
    float y3 = y0 - 1.0 + 3.0 * G3;
    float z3 = z0 - 1.0 + 3.0 * G3;

    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int gi0 = perm[ii + perm[jj + perm[kk]]] % 12u;
    int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12u;
    int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12u;
    int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12u;

    float t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
    if (t0 < 0)
        n0 = 0.0; else {
        t0 *= t0;
        n0 = t0 * t0 * dotF(grad3[gi0], x0, y0, z0);
    }
    float t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
    if (t1 < 0)
        n1 = 0.0; else {
        t1 *= t1;
        n1 = t1 * t1 * dotF(grad3[gi1], x1, y1, z1);
    }
    float t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
    if (t2 < 0)
        n2 = 0.0; else {
        t2 *= t2;
        n2 = t2 * t2 * dotF(grad3[gi2], x2, y2, z2);
    }
    float t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
    if (t3 < 0)
        n3 = 0.0; else {
        t3 *= t3;
        n3 = t3 * t3 * dotF(grad3[gi3], x3, y3, z3);
    }

    return 32.0 * (n0 + n1 + n2 + n3);
}

//
// NOISE COMBINATION STUFF
// 

float CombineNoise(float noiseValues[10]) {
    float finalNoiseValue = 0.0;
    float amplitude = 1.0;
    float totalAmplitude = 0.0;

    for (int o = 0; o < octaves; o++) {
        amplitude *= persistence;
        totalAmplitude += amplitude;
        finalNoiseValue += noiseValues[o] * amplitude;
    }

    return finalNoiseValue / totalAmplitude;
}

void GetNoiseValues3D(float x, float y, float z, out float noiseValues[10])
{
    float freq = 1.0;

    for (int o3 = 0; o3 < octaves; o3++)
    {
       noiseValues[o3] = Noise3D(
            ((x - (reses.x / 2)) * noiseScale + offset.x) * freq, 
            ((y - (reses.y / 2)) * noiseScale + offset.y) * freq,
            z * freq
        );
        freq *= lacunarity;
    }
}

float NoiseCombinedOctaves3D(float x, float y, float z) {
    float noiseValues[10];
    GetNoiseValues3D(x, y, z, noiseValues);
    return CombineNoise(noiseValues);
}

[numthreads(16, 16, 1)]
void ComputeNoise(uint3 id : SV_DispatchThreadID) {
    if (id.x > reses.x || id.y > reses.y)
        return;

    float noiseValue = NoiseCombinedOctaves3D(id.x, id.y, 0);

    if (normalize)
        noiseValue = (noiseValue + 1) * 0.5;

    Result[id.xy] = float4(noiseValue, noiseValue, noiseValue, 1);
}

#pragma kernel ComputeNoiseSilhouette



[numthreads(16, 16, 1)]
void ComputeNoiseSilhouette(uint3 id : SV_DispatchThreadID)
{
    if (id.x > reses.x || id.y > reses.y)
        return;

    float noiseValue = NoiseCombinedOctaves3D(id.x, id.y, 0);

    if (normalize)
        noiseValue = (noiseValue + 1) * 0.5;

    noiseValue = clamp01(noiseValue - sqrFallOff(reses.x, reses.y, id.x, id.y));

    if (noiseValue <= waterLevel) 
    { 
        noiseValue = 0.0; 
    }
    else
    {
        noiseValue = 1.0;
    }

    Result[id.xy] = float4(noiseValue, noiseValue, noiseValue, 1);
}

#pragma kernel ComputeNoiseArray

uniform StructuredBuffer<float>  float1Array;
uniform StructuredBuffer<float2> float2Array;
uniform StructuredBuffer<float3> float3Array;
uniform StructuredBuffer<float4> float4Array;

uniform RWStructuredBuffer<float> outputArray;

[numthreads(16, 1, 1)]
void ComputeNoiseArray(uint3 id : SV_DispatchThreadID) {

    if (id.x >= outputArray.Length)
        return;

    float noiseValue = NoiseCombinedOctaves3D(
        float3Array[id.x].x * noiseScale,
        float3Array[id.x].y * noiseScale,
        float3Array[id.x].z * noiseScale
    );

    if (normalize)
    {
        noiseValue = (noiseValue + 1) * 0.5;
    }

    outputArray[id.x] = noiseValue;
}